<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>R.C Technical Institute ‚Äî CO11 Attendance</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<style>
:root {
  --bg: #0d1b2a;
  --card-bg: rgba(20, 33, 61, 0.9);
  --accent: #00ff99;
  --accent-2: #3a86ff;
  --text: #e0e1dd;
  --muted: #778da9;
  --border: rgba(0, 255, 153, 0.2);
  --green: #06d6a0;
  --amber: #ffd166;
  --red: #ef476f;
  font-family: 'Fira Code', monospace;
}
* { box-sizing: border-box; transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1); }
html, body { height: 100%; margin: 0; background: var(--bg); color: var(--text); }
.page { max-width: 1400px; margin: 40px auto; padding: 20px; }
header { display: flex; gap: 20px; align-items: center; margin-bottom: 20px; border-bottom: 1px solid var(--border); padding-bottom: 16px; }
h1 { margin: 0; font-size: 22px; color: var(--accent); }
.muted { color: var(--muted); font-size: 14px; }

.layout { display: grid; grid-template-columns: 1fr 450px; gap: 20px; }
.card { background: var(--card-bg); border-radius: 12px; padding: 16px; border: 1px solid var(--border); box-shadow: 0 8px 24px rgba(0,0,0,0.2); }
.card-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; }
.title { font-weight: 600; color: var(--accent); }

#recentList { max-height: 300px; overflow-y: auto; display: flex; flex-direction: column; gap: 10px; padding-right: 6px; scrollbar-width: thin; scrollbar-color: var(--accent) var(--bg); }
.rec-row { display: flex; justify-content: space-between; gap: 12px; padding: 10px; border-radius: 10px; background: rgba(0,255,153,0.05); }
.rec-row:hover { transform: scale(1.02); }
.left { display: flex; gap: 12px; align-items: center; }
.avatar { width: 40px; height: 40px; border-radius: 10px; background: linear-gradient(135deg, var(--accent), var(--accent-2)); display: flex; align-items: center; justify-content: center; font-weight: 600; color: var(--bg); }
.student-name { font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.meta { color: var(--muted); font-size: 13px; }
.badge { padding: 6px 10px; border-radius: 999px; font-weight: 600; font-size: 12px; border: 1px solid var(--border); }
.badge.present { background: rgba(6,214,160,0.1); color: var(--green); }
.badge.absent { background: rgba(239,71,111,0.1); color: var(--red); }
.badge.late { background: rgba(255,209,102,0.1); color: var(--amber); }

button { cursor: pointer; border-radius: 10px; padding: 8px 12px; border: 1px solid var(--border); background: transparent; color: var(--text); font-weight: 600; }
button:hover { background: rgba(0,255,153,0.1); transform: translateY(-2px); }
.btn-primary { background: linear-gradient(135deg, var(--accent), var(--accent-2)); border: none; color: var(--bg); }
.btn-ok { border-color: rgba(6,214,160,0.2); color: var(--green); }
.btn-warn { border-color: rgba(255,209,102,0.2); color: var(--amber); }
.btn-bad { border-color: rgba(239,71,111,0.2); color: var(--red); }
.btn-ghost { border-style: dashed; }
input[type="text"], input[type="date"], select { padding: 10px; border-radius: 10px; border: 1px solid var(--border); background: rgba(0,255,153,0.03); color: var(--text); }
input:focus, select:focus { outline: none; border-color: var(--accent); }

.master-container { max-height: 700px; overflow-y: auto; padding: 6px; border-radius: 10px; border: 1px solid var(--border); }
.master-item { display: flex; justify-content: space-between; gap: 10px; padding: 10px; border-radius: 10px; cursor: pointer; }
.master-item:hover { background: rgba(0,255,153,0.05); }
.master-left { display: flex; gap: 10px; align-items: center; }
.master-status { font-size: 13px; color: var(--muted); min-width: 120px; text-align: right; }

.found-card { padding: 12px; border-radius: 10px; background: rgba(0,255,153,0.05); border: 1px solid var(--border); }
.subject-pills { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 10px; }
.sub-pill { padding: 6px 10px; border-radius: 8px; background: rgba(0,255,153,0.03); cursor: pointer; font-weight: 600; border: 1px solid var(--border); }
.sub-pill:hover { transform: scale(1.1); background: rgba(0,255,153,0.1); }
.sub-pill.active { border-color: var(--accent); background: linear-gradient(135deg, rgba(0,255,153,0.1), rgba(58,134,255,0.05)); }

#particles { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: -1; }
.particle { position: absolute; font-size: 20px; opacity: 0.15; color: var(--accent); animation: float 12s infinite linear; }
@keyframes float { 0% { transform: translateY(100vh) rotate(0deg); } 100% { transform: translateY(-100vh) rotate(360deg); } }

#printArea { position: fixed; left: -9999px; top: -9999px; width: 794px; background: white; color: #111; padding: 16px; }
table { width: 100%; border-collapse: collapse; font-size: 11px; }
table th, table td { padding: 6px; border: 1px solid #ddd; }
.toast { position: fixed; right: 20px; bottom: 20px; background: rgba(20,33,61,0.9); padding: 10px 14px; border-radius: 10px; color: var(--accent); font-weight: 600; animation: fadeIn 0.5s ease; }
@keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
.auth-card { display: flex; gap: 12px; align-items: center; }
.input-small { padding: 8px; border-radius: 8px; border: 1px solid var(--border); background: transparent; color: var(--text); }
.user-badge { padding: 6px 10px; border-radius: 999px; background: rgba(0,255,153,0.05); }

@media (max-width: 1000px) { .layout { grid-template-columns: 1fr; } }
</style>
</head>
<body>
<div id="particles"></div>
<div class="page">
<header>
<div style="width:56px;height:56px;border-radius:10px;background:linear-gradient(135deg,var(--accent),var(--accent-2));display:flex;align-items:center;justify-content:center;font-weight:700;color:var(--bg)">RC</div>
<div style="flex:1">
<h1>R.C Technical Institute ‚Äî CO11 Attendance</h1>
<div class="muted">Track attendance by date and subject with a sleek interface.</div>
</div>
<div class="auth-card">
<input id="auUsername" class="input-small" placeholder="username" autocomplete="username" />
<input id="auPassword" class="input-small" placeholder="password" type="password" autocomplete="current-password" />
<button id="btnAuthAction" class="btn-primary">Login / Signup</button>
</div>
<div style="display:flex;gap:12px;align-items:center">
<div id="loggedInfo" class="user-badge">Not signed in</div>
<button id="btnLogoutTop" class="btn-ghost" style="display:none">Logout</button>
</div>
</header>

<div class="layout">
<div>
<div class="card">
<div class="card-header"><div class="title">üïí Recent Marks</div><div class="muted">Subject-specific history</div></div>
<div id="recentList"></div>
</div>
<div class="card">
<div class="card-header"><div class="title">üîé Mark Attendance</div><div class="muted">Select date, subject, and mark</div></div>
<div style="display:flex;gap:10px;align-items:center;margin-bottom:12px">
<input id="dateSelect" type="date" style="width:140px" />
<select id="subjectSelect" style="width:200px"></select>
<input id="searchInput" type="text" placeholder="Enrollment or name..." style="flex:1" />
<button id="searchBtn" class="btn-primary">Search</button>
</div>
<div id="foundArea"><div class="muted">Select date, subject, and search to start.</div></div>
<div style="display:flex;gap:10px;align-items:center;margin-top:12px">
<input id="deanEmail" type="text" placeholder="Dean email" style="flex:1" />
<button id="finalizeBtn" class="btn-primary">üì§ Email Report</button>
<button id="downloadPdfBtn" class="btn-ghost">‚¨áÔ∏è PDF</button>
</div>
</div>
</div>
<div>
<div class="card">
<div class="card-header"><div class="title">üìã Students</div><div class="muted">Click to mark</div></div>
<div class="master-container" id="masterContainer"><div id="masterList"></div></div>
</div>
</div>
</div>
</div>

<div id="printArea" aria-hidden="true"></div>

<script>
const SUBJECTS = ['CPF', 'MATHS', 'PHYSICS', 'BE', 'ENGLISH', 'CBSWPD'];
const subjectSymbols = {
  'CPF': ['{', '}', ';', '=>', 'def', 'print'],
  'MATHS': ['‚àë', '‚à´', 'œÄ', '‚àö', '‚àû', 'Œî'],
  'PHYSICS': ['Œª', 'Œº', 'Œ©', 'V', 'F', 'g'],
  'BE': ['‚öô', 'üîå', 'üîã', 'üõ†', 'üî©', 'üîß'],
  'ENGLISH': ['üìñ', '‚úç', '‚ùù', 'A', '!', '?'],
  'CBSWPD': ['üí¨', 'üé§', 'üì¢', 'üìß', 'ü§ù', 'üìà']
};
const realStudents = [
{ enrollmentNumber: "COMP101", name: "AGRAVAT SUNNY HASMUKHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP102", name: "AMIN VIDHI HARSIDDHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP103", name: "ANSARIJULAYA MOHAMMAD TALHA", class: "CO11" },
{ enrollmentNumber: "COMP105", name: "BADI MOHMADSALIK RASUL", class: "CO11" },
{ enrollmentNumber: "COMP106", name: "BARAD PRIYABEN SURESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP108", name: "BAROT SHLOK NAYANKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP109", name: "BASANTANI SUMIT GOPICHAND", class: "CO11" },
{ enrollmentNumber: "COMP110", name: "BHAND YASH SUBHASHCHANDRA", class: "CO11" },
{ enrollmentNumber: "COMP111", name: "BHARVAD HARDIK BHIMABHAI", class: "CO11" },
{ enrollmentNumber: "COMP113", name: "BHATIYA DEEP BHAVESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP114", name: "BHURIYA HETVI YOGESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP115", name: "BRAHMBHATT JIYA BHAVESH", class: "CO11" },
{ enrollmentNumber: "COMP116", name: "BUHA SNEH GIRISHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP117", name: "BUKHARI ALISHAN ALIRAZA", class: "CO11" },
{ enrollmentNumber: "COMP118", name: "BUKHARI TABISH MAHEDI ALIRAZA", class: "CO11" },
{ enrollmentNumber: "COMP120", name: "CHAUHAN ASHISHBHAI KANTIBHAI", class: "CO11" },
{ enrollmentNumber: "COMP122", name: "CHAUHAN JAHNAVI SOHAGKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP123", name: "CHAUHAN KARAN GUNVANTBHAI", class: "CO11" },
{ enrollmentNumber: "COMP124", name: "CHAUHAN RISHI BHUPENDRABHAI", class: "CO11" },
{ enrollmentNumber: "COMP127", name: "CHAUHAN USMITA MAHESHJI", class: "CO11" },
{ enrollmentNumber: "COMP129", name: "CHAVADA PRATIK KISHANSINH", class: "CO11" },
{ enrollmentNumber: "COMP130", name: "CHHODBADIA DEEP MEHULKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP131", name: "DABHI MITRAJSINH SANJAYSINH", class: "CO11" },
{ enrollmentNumber: "COMP132", name: "DANAK VATSAL JANAKKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP134", name: "DARJI ASHVINI SURESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP135", name: "DARJI AYUSH MAHESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP136", name: "DARJI JAL VINODBHAI", class: "CO11" },
{ enrollmentNumber: "COMP137", name: "DARJI JAY MANISHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP139", name: "DARJI SHLOK JITENDRAKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP140", name: "DARJI SIDDHIBEN KANTIBHAI", class: "CO11" },
{ enrollmentNumber: "COMP141", name: "DAVE AAYUSH MEHULBHAI", class: "CO11" },
{ enrollmentNumber: "COMP143", name: "DAVE DHRUV JITENDRAKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP144", name: "DAVE KHWAISH MEHUL", class: "CO11" },
{ enrollmentNumber: "COMP145", name: "DAVE SHIVAM RUPESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP146", name: "DEDAKIYA JAYMIN NAYANBHAI", class: "CO11" },
{ enrollmentNumber: "COMP147", name: "DESAI ANKESHKUMAR MERAJBHAI", class: "CO11" },
{ enrollmentNumber: "COMP148", name: "DESAI ISHAN NARANBHAI", class: "CO11" },
{ enrollmentNumber: "COMP149", name: "DESAI PRAKASHBHAI RANABHAI", class: "CO11" },
{ enrollmentNumber: "COMP150", name: "DHOBI HARSH SACHINKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP151", name: "DHOKIYA SHLOKKUMAR ARAVINDBHAI", class: "CO11" },
{ enrollmentNumber: "COMP152", name: "DHRUVESH PATEL", class: "CO11" },
{ enrollmentNumber: "COMP153", name: "DIVYESH MITESH CHHATBAR", class: "CO11" },
{ enrollmentNumber: "COMP154", name: "DIWAN AKSHAY AMIT", class: "CO11" },
{ enrollmentNumber: "COMP155", name: "DIWAN REHAN AHMED MO. JAVED", class: "CO11" },
{ enrollmentNumber: "COMP156", name: "DOMADIYA MEET SHAILESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP157", name: "DOMADIYA MOHIT RATILAL", class: "CO11" },
{ enrollmentNumber: "COMP158", name: "DONGA YUG VIPULBHAI", class: "CO11" },
{ enrollmentNumber: "COMP160", name: "GADHAVI TWISHA VIJAYDAN", class: "CO11" },
{ enrollmentNumber: "COMP162", name: "GAJJAR RUDRA MAULIK", class: "CO11" },
{ enrollmentNumber: "COMP163", name: "GAUTAM SHUBHAM SATYAPRAKASH", class: "CO11" },
{ enrollmentNumber: "COMP164", name: "GORE SAKSHI VILAS", class: "CO11" },
{ enrollmentNumber: "COMP165", name: "GORECHA SHUBHAM HIRENKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP167", name: "GOTHI KULDEEPKUMAR DHARMENDRA", class: "CO11" },
{ enrollmentNumber: "COMP168", name: "GUPTA VANSHIK PARESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP169", name: "GURJAR PARTHKUMAR DEVRAMBHAI", class: "CO11" },
{ enrollmentNumber: "COMP171", name: "HENIL PARIKH", class: "CO11" },
{ enrollmentNumber: "COMP172", name: "JADAV VAIDIK VIJAYBHAI", class: "CO11" },
{ enrollmentNumber: "COMP173", name: "JAIN DARSHIL JITENDRA", class: "CO11" },
{ enrollmentNumber: "COMP174", name: "JAIN LOVE MANISHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP175", name: "JAISVAR ABHISHEK RAMBALI", class: "CO11" },
{ enrollmentNumber: "COMP176", name: "JANDIYA VAIBHAV ISHWARBHAI", class: "CO11" },
{ enrollmentNumber: "COMP177", name: "JANI YASHVI VIPULBHAI", class: "CO11" },
{ enrollmentNumber: "COMP178", name: "JAWALE DHAKESH YOGESH", class: "CO11" },
{ enrollmentNumber: "COMP179", name: "JAYSWAL DAKSH DIPAKKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP180", name: "BHALIYA BHAIRAVI KIRITBHAI", class: "CO11" },
{ enrollmentNumber: "COMP181", name: "BHAVSAR KARTIK MITESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP182", name: "BHAVYA CHANDRAKANT PRAJAPATI", class: "CO11" },
{ enrollmentNumber: "COMP183", name: "CHAUDHARI BHAVY DINESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP184", name: "CHAUHAN DIXITA DILIPBHAI", class: "CO11" },
{ enrollmentNumber: "COMP185", name: "CHAUHAN VIVEK", class: "CO11" },
{ enrollmentNumber: "COMP186", name: "CHHATBAR HET ALPESH", class: "CO11" },
{ enrollmentNumber: "COMP187", name: "CHITRODA JAY SANJAYBHAI", class: "CO11" },
{ enrollmentNumber: "COMP188", name: "DARJI ARYAN SANJAYBHAI", class: "CO11" },
{ enrollmentNumber: "COMP189", name: "DESAI ARYAN KALPESHBHAI", class: "CO11" },
{ enrollmentNumber: "COMP191", name: "DODIYA ADITI BHUPENDRABHAI", class: "CO11" },
{ enrollmentNumber: "COMP192", name: "GAJJAR BHAVYAKUMAR VIPULKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP193", name: "GANDHARVA KARINA JITESHKUMAR", class: "CO11" },
{ enrollmentNumber: "COMP194", name: "HEMAL NAGAR", class: "CO11" },
{ enrollmentNumber: "COMP195", name: "KANHA SENJALIYA", class: "CO11" }
];
let attendanceRecords = {};
let recentAttendance = SUBJECTS.reduce((o, s) => { o[s] = []; return o; }, {});

const USERS_KEY = 'rc_users_v1';
const CURRENT_KEY = 'rc_current_user_v1';
function readJSON(key) { try { return JSON.parse(localStorage.getItem(key)); } catch(e) { return null; } }
function writeJSON(key, val) { localStorage.setItem(key, JSON.stringify(val)); }
function getUsers() { return readJSON(USERS_KEY) || {}; }
function setUsers(o) { writeJSON(USERS_KEY, o); }
async function hashString(str) {
  const enc = new TextEncoder().encode(str);
  const buf = await crypto.subtle.digest('SHA-256', enc);
  return Array.from(new Uint8Array(buf)).map(b => b.toString(16).padStart(2, '0')).join('');
}
async function createAccount(username, password) {
  username = username.trim().toLowerCase();
  if (!username || password.length < 3) throw new Error('Invalid username or password');
  const users = getUsers();
  if (users[username]) throw new Error('Username taken');
  users[username] = { pwdHash: await hashString(password), created: new Date().toISOString() };
  setUsers(users);
  return users[username];
}
async function loginAccount(username, password) {
  username = username.trim().toLowerCase();
  const users = getUsers();
  const u = users[username];
  if (!u) throw new Error('User not found');
  if (await hashString(password) !== u.pwdHash) throw new Error('Invalid password');
  writeJSON(CURRENT_KEY, { username, loggedAt: new Date().toISOString() });
  return { username };
}
function logout() { localStorage.removeItem(CURRENT_KEY); onAuthChanged(); }
function getCurrent() { return readJSON(CURRENT_KEY); }
function dataKeyFor(username) { return `rc_account_data_v1::${username}`; }
function saveAccountData(username, payload) { writeJSON(dataKeyFor(username), payload); }
function loadAccountData(username) { return readJSON(dataKeyFor(username)); }

function saveStateForCurrent() {
  const cur = getCurrent();
  if (!cur) return;
  saveAccountData(cur.username, { attendanceRecords, recentAttendance, timestamp: new Date().toISOString() });
}
function loadStateForCurrent() {
  const cur = getCurrent();
  if (!cur) return;
  const parsed = loadAccountData(cur.username);
  if (parsed) {
    attendanceRecords = parsed.attendanceRecords || {};
    recentAttendance = parsed.recentAttendance || SUBJECTS.reduce((o, s) => { o[s] = []; return o; }, {});
  }
}

const dateSelect = document.getElementById('dateSelect');
const subjectSelect = document.getElementById('subjectSelect');
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');
const foundArea = document.getElementById('foundArea');
const recentList = document.getElementById('recentList');
const masterList = document.getElementById('masterList');
const finalizeBtn = document.getElementById('finalizeBtn');
const downloadPdfBtn = document.getElementById('downloadPdfBtn');
const deanEmailInput = document.getElementById('deanEmail');
const printArea = document.getElementById('printArea');
const auUsername = document.getElementById('auUsername');
const auPassword = document.getElementById('auPassword');
const btnAuthAction = document.getElementById('btnAuthAction');
const loggedInfo = document.getElementById('loggedInfo');
const btnLogoutTop = document.getElementById('btnLogoutTop');
const particles = document.getElementById('particles');

function escapeHtml(s) { return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }
function capitalize(s) { return s ? s.charAt(0).toUpperCase() + s.slice(1) : s; }
function formatDate(date) { return date.toISOString().split('T')[0]; }

function initDateAndSubjects() {
  dateSelect.value = formatDate(new Date());
  SUBJECTS.forEach(sub => {
    const opt = document.createElement('option');
    opt.value = sub;
    opt.textContent = sub;
    subjectSelect.appendChild(opt);
  });
  subjectSelect.addEventListener('change', () => {
    const student = findStudent(searchInput.value.trim());
    if (student) showFound(student);
    renderRecent();
    renderMasterList();
    updateBackgroundSymbols(subjectSelect.value);
  });
  dateSelect.addEventListener('change', () => {
    const student = findStudent(searchInput.value.trim());
    if (student) showFound(student);
    renderRecent();
    renderMasterList();
  });
  updateBackgroundSymbols(SUBJECTS[0]);
  renderMasterList(); // Ensure initial render
}
initDateAndSubjects();

function updateBackgroundSymbols(subject) {
  particles.innerHTML = '';
  const symbols = subjectSymbols[subject] || [];
  for (let i = 0; i < 30; i++) {
    const p = document.createElement('div');
    p.className = 'particle';
    p.textContent = symbols[Math.floor(Math.random() * symbols.length)] || '?';
    p.style.left = `${Math.random() * 100}%`;
    p.style.fontSize = `${Math.random() * 20 + 15}px`;
    p.style.animationDuration = `${Math.random() * 10 + 8}s`;
    p.style.animationDelay = `-${Math.random() * 10}s`;
    particles.appendChild(p);
  }
}

function findStudent(q) {
  if (!q) return null;
  q = q.trim().toLowerCase();
  return realStudents.find(s => s.enrollmentNumber.toLowerCase() === q || s.name.toLowerCase() === q) ||
         realStudents.find(s => s.enrollmentNumber.toLowerCase().includes(q) || s.name.toLowerCase().includes(q)) || null;
}

function renderRecent() {
  const subject = subjectSelect.value;
  recentList.innerHTML = '';
  (recentAttendance[subject] || []).forEach(rec => {
    const row = document.createElement('div');
    row.className = 'rec-row';
    row.innerHTML = `
      <div class="left">
        <div class="avatar">${(rec.studentName || '--').split(' ').slice(0,2).map(w=>w[0]).join('')}</div>
        <div>
          <div class="student-name">${escapeHtml(rec.studentName)}</div>
          <div class="meta">${rec.enrollmentNumber} ‚Ä¢ ${rec.date}</div>
        </div>
      </div>
      <div style="display:flex;gap:8px;align-items:center">
        <div class="badge ${rec.status}">${capitalize(rec.status)}</div>
        <button class="btn-ghost">Edit</button>
      </div>
    `;
    row.querySelector('button').addEventListener('click', e => {
      e.stopPropagation();
      openEditPopup(rec.enrollmentNumber, row.querySelector('button'), rec.subject, rec.date);
    });
    recentList.appendChild(row);
  });
}

function renderMasterList() {
  masterList.innerHTML = '';
  if (!realStudents.length) {
    masterList.innerHTML = '<div class="muted">No students available.</div>';
    showToast('Student list is empty');
    return;
  }
  const date = dateSelect.value;
  const subject = subjectSelect.value;
  realStudents.forEach(s => {
    const div = document.createElement('div');
    div.className = 'master-item';
    const rec = attendanceRecords[s.enrollmentNumber] || { dates: {} };
    const status = rec.dates[date] && rec.dates[date][subject] ? rec.dates[date][subject].status : '‚Äî';
    div.innerHTML = `
      <div class="master-left">
        <div>
          <div class="student-name">${escapeHtml(s.name)}</div>
          <div class="meta">${escapeHtml(s.enrollmentNumber)}</div>
        </div>
      </div>
      <div class="master-status">Status: ${capitalize(status)}</div>
    `;
    div.addEventListener('click', () => {
      showFound(s);
      searchInput.value = s.enrollmentNumber;
    });
    masterList.appendChild(div);
  });
}

function showFound(student) {
  if (!student) {
    foundArea.innerHTML = '<div class="muted">Student not found.</div>';
    return;
  }
  const date = dateSelect.value;
  const subject = subjectSelect.value;
  const rec = attendanceRecords[student.enrollmentNumber] || { dates: {} };
  const current = rec.dates[date] && rec.dates[date][subject] || null;
  foundArea.innerHTML = `
    <div class="found-card">
      <div style="display:flex;justify-content:space-between;align-items:center">
        <div>
          <div class="student-name">${escapeHtml(student.name)}</div>
          <div class="meta">${escapeHtml(student.enrollmentNumber)}</div>
        </div>
        <div style="text-align:right">
          <div class="title">${escapeHtml(subject)} - ${date}</div>
          <div class="meta">${current ? capitalize(current.status) : '‚Äî'}</div>
        </div>
      </div>
      <div class="subject-pills">
        ${SUBJECTS.map(s => `<span class="sub-pill ${s === subject ? 'active' : ''}" data-sub="${s}">${s}</span>`).join('')}
      </div>
      <hr style="margin:10px 0;border:none;border-top:1px solid var(--border)">
      <div style="display:flex;gap:10px;align-items:center">
        <button data-action="present" class="btn-ok">Present</button>
        <button data-action="late" class="btn-warn">Late</button>
        <button data-action="absent" class="btn-bad">Absent</button>
        <button id="undoBtn" class="btn-ghost">Undo</button>
        <button id="nextBtn" class="btn-primary">Next</button>
      </div>
    </div>
  `;
  foundArea.querySelectorAll('.sub-pill').forEach(el => {
    el.addEventListener('click', () => {
      subjectSelect.value = el.getAttribute('data-sub');
      subjectSelect.dispatchEvent(new Event('change'));
    });
  });
  foundArea.querySelectorAll('button[data-action]').forEach(btn => {
    btn.addEventListener('click', () => {
      if (!getCurrent()) return showToast('Please sign in');
      markSubject(student, subject, btn.getAttribute('data-action'), date);
    });
  });
  document.getElementById('undoBtn').addEventListener('click', () => clearSubjectMark(student, subject, date));
  document.getElementById('nextBtn').addEventListener('click', () => autoAdvanceToNext(student.enrollmentNumber));
}

function ensureRecord(enrollmentNumber) {
  if (!attendanceRecords[enrollmentNumber]) attendanceRecords[enrollmentNumber] = { dates: {} };
  return attendanceRecords[enrollmentNumber];
}
function markSubject(student, subject, status, date) {
  const rec = ensureRecord(student.enrollmentNumber);
  if (!rec.dates[date]) rec.dates[date] = {};
  rec.dates[date][subject] = { status, timestamp: new Date().toLocaleTimeString() };
  recentAttendance[subject].unshift({
    id: Date.now().toString(),
    studentName: student.name,
    enrollmentNumber: student.enrollmentNumber,
    status,
    subject,
    date,
    timestamp: rec.dates[date][subject].timestamp
  });
  recentAttendance[subject] = recentAttendance[subject].slice(0, 100);
  renderRecent();
  renderMasterList();
  saveStateForCurrent();
  showToast(`Marked ${status} for ${student.name}`);
  autoAdvanceToNext(student.enrollmentNumber);
}
function clearSubjectMark(student, subject, date) {
  const rec = attendanceRecords[student.enrollmentNumber];
  if (rec && rec.dates[date] && rec.dates[date][subject]) {
    delete rec.dates[date][subject];
    if (!Object.keys(rec.dates[date]).length) delete rec.dates[date];
  }
  recentAttendance[subject] = recentAttendance[subject].filter(r => r.enrollmentNumber !== student.enrollmentNumber || r.date !== date);
  renderRecent();
  renderMasterList();
  saveStateForCurrent();
  showToast('Mark cleared');
}

let activePopup = null;
function openEditPopup(enrollmentNumber, anchorEl, subjectDefault, dateDefault) {
  if (!getCurrent()) return showToast('Please sign in');
  if (activePopup) activePopup.remove();
  const rect = anchorEl.getBoundingClientRect();
  const popup = document.createElement('div');
  popup.style.position = 'absolute';
  popup.style.background = 'var(--card-bg)';
  popup.style.padding = '12px';
  popup.style.borderRadius = '10px';
  popup.style.border = '1px solid var(--border)';
  popup.style.top = `${rect.bottom + window.scrollY + 8}px`;
  popup.style.left = `${rect.left + window.scrollX}px`;
  popup.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
  popup.innerHTML = `
    <div style="display:flex;flex-direction:column;gap:10px">
      <label>Date: <input id="popupDate" type="date" value="${dateDefault || formatDate(new Date())}"></label>
      <label>Subject: <select id="popupSub">${SUBJECTS.map(s => `<option value="${s}" ${s===subjectDefault?'selected':''}>${s}</option>`).join('')}</select></label>
      <label>Status: <select id="popupStatus"><option value="present">Present</option><option value="late">Late</option><option value="absent">Absent</option></select></label>
      <div style="display:flex;gap:10px">
        <button id="popupSave" class="btn-ok">Save</button>
        <button id="popupCancel" class="btn-ghost">Cancel</button>
      </div>
    </div>
  `;
  document.body.appendChild(popup);
  activePopup = popup;
  window.addEventListener('click', e => { if (activePopup && !activePopup.contains(e.target)) activePopup.remove(); activePopup = null; });
  document.getElementById('popupCancel').addEventListener('click', () => { activePopup.remove(); activePopup = null; });
  document.getElementById('popupSave').addEventListener('click', () => {
    const date = document.getElementById('popupDate').value;
    const sub = document.getElementById('popupSub').value;
    const status = document.getElementById('popupStatus').value;
    const rec = ensureRecord(enrollmentNumber);
    if (!rec.dates[date]) rec.dates[date] = {};
    rec.dates[date][sub] = { status, timestamp: new Date().toLocaleTimeString() };
    recentAttendance[sub] = recentAttendance[sub].filter(r => r.enrollmentNumber !== enrollmentNumber || r.date !== date);
    recentAttendance[sub].unshift({ id: Date.now().toString(), studentName: realStudents.find(s => s.enrollmentNumber === enrollmentNumber).name, enrollmentNumber, status, subject: sub, date, timestamp: rec.dates[date][sub].timestamp });
    renderRecent();
    renderMasterList();
    saveStateForCurrent();
    showToast('Edit saved');
    activePopup.remove();
    activePopup = null;
  });
}

function autoAdvanceToNext(currentEnrollment) {
  const date = dateSelect.value;
  const subject = subjectSelect.value;
  const idx = realStudents.findIndex(s => s.enrollmentNumber === currentEnrollment);
  const next = realStudents.slice(idx + 1).find(s => !attendanceRecords[s.enrollmentNumber]?.dates[date]?.[subject]);
  if (!next) {
    foundArea.innerHTML = `<div class="muted">All students marked for ${subject} on ${date}.</div>`;
    return;
  }
  showFound(next);
  searchInput.value = next.enrollmentNumber;
}

function buildPrintableHTML() {
  const date = dateSelect.value;
  const rows = realStudents.map(s => {
    const rec = attendanceRecords[s.enrollmentNumber] || { dates: {} };
    const cells = SUBJECTS.map(sub => rec.dates[date]?.[sub]?.status || '‚Äî');
    return `<tr><td>${escapeHtml(s.enrollmentNumber)}</td><td>${escapeHtml(s.name)}</td>${cells.map(c => `<td>${capitalize(escapeHtml(c))}</td>`).join('')}</tr>`;
  }).join('');
  return `
    <div>
      <h2>CO11 Attendance - ${date}</h2>
      <table>
        <thead><tr><th>Enrollment</th><th>Name</th>${SUBJECTS.map(s => `<th>${s}</th>`).join('')}</tr></thead>
        <tbody>${rows}</tbody>
      </table>
    </div>
  `;
}
async function downloadPDF() {
  printArea.innerHTML = buildPrintableHTML();
  await new Promise(r => setTimeout(r, 100));
  const canvas = await html2canvas(printArea, { scale: 2 });
  const imgData = canvas.toDataURL('image/png');
  const { jsPDF } = window.jspdf;
  const pdf = new jsPDF('p', 'pt', 'a4');
  const width = pdf.internal.pageSize.getWidth();
  const height = pdf.internal.pageSize.getHeight() * (canvas.height / canvas.width);
  pdf.addImage(imgData, 'PNG', 0, 0, width, height);
  const filename = `co11_attendance_${dateSelect.value}.pdf`;
  pdf.save(filename);
  showToast('PDF downloaded');
  return filename;
}

function buildAttendanceSnapshot() {
  const date = dateSelect.value;
  return realStudents.map(s => {
    const rec = attendanceRecords[s.enrollmentNumber] || { dates: {} };
    const subjObj = {};
    SUBJECTS.forEach(sub => subjObj[sub] = rec.dates[date]?.[sub]?.status || '‚Äî');
    return { enrollmentNumber: s.enrollmentNumber, name: s.name, class: s.class, ...subjObj };
  });
}
function toCSV(rows) {
  const header = ['Enrollment', 'Name', 'Class', ...SUBJECTS];
  return [header.join(',')].concat(rows.map(r => {
    const q = v => `"${String(v).replace(/"/g, '""')}"`;
    return [q(r.enrollmentNumber), q(r.name), q(r.class), ...SUBJECTS.map(s => q(r[s]))].join(',');
  })).join('\n');
}
function downloadCSV() {
  const rows = buildAttendanceSnapshot();
  const csv = toCSV(rows);
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `co11_attendance_${dateSelect.value}.csv`;
  a.click();
  URL.revokeObjectURL(url);
  showToast('CSV downloaded');
}

function openMailToDean(filename) {
  const dean = deanEmailInput.value.trim() || 'dean@example.com';
  const subject = subjectSelect.value;
  const date = dateSelect.value;
  const counts = summarizeCountsForSubject(subject, date);
  const subjectLine = encodeURIComponent(`CO11 Attendance - ${subject} - ${date}`);
  const body = encodeURIComponent(`Dear Dean,\n\nSummary for ${subject} on ${date}:\nPresent: ${counts.present}\nLate: ${counts.late}\nAbsent: ${counts.absent}\nUnmarked: ${counts.notMarked}\n\nAttached: ${filename}\n\nRegards,\nInstructor`);
  window.location.href = `mailto:${dean}?subject=${subjectLine}&body=${body}`;
}
function summarizeCountsForSubject(subject, date) {
  let present = 0, absent = 0, late = 0, notMarked = 0;
  realStudents.forEach(s => {
    const status = attendanceRecords[s.enrollmentNumber]?.dates[date]?.[subject]?.status;
    if (status === 'present') present++;
    else if (status === 'absent') absent++;
    else if (status === 'late') late++;
    else notMarked++;
  });
  return { present, absent, late, notMarked };
}

btnAuthAction.addEventListener('click', async () => {
  const u = auUsername.value.trim();
  const p = auPassword.value.trim();
  if (!u || !p) return showToast('Enter username & password');
  try {
    await loginAccount(u, p);
    showToast('Logged in');
    onAuthChanged();
  } catch (e) {
    if (e.message.includes('not found')) {
      try {
        await createAccount(u, p);
        await loginAccount(u, p);
        showToast('Account created');
        onAuthChanged();
      } catch (err) { showToast(err.message); }
    } else showToast(e.message);
  }
});
btnLogoutTop.addEventListener('click', () => { logout(); showToast('Logged out'); });
function onAuthChanged() {
  const cur = getCurrent();
  loggedInfo.textContent = cur ? cur.username : 'Not signed in';
  btnLogoutTop.style.display = cur ? 'inline-block' : 'none';
  if (cur) loadStateForCurrent();
  else {
    attendanceRecords = {};
    recentAttendance = SUBJECTS.reduce((o, s) => { o[s] = []; return o; }, {});
  }
  renderMasterList();
  renderRecent();
}
onAuthChanged();

searchBtn.addEventListener('click', () => {
  const q = searchInput.value.trim();
  if (!q) return showToast('Enter enrollment or name');
  const student = findStudent(q);
  if (!student) return showToast('Student not found');
  showFound(student);
});
searchInput.addEventListener('keydown', e => { if (e.key === 'Enter') searchBtn.click(); });
downloadPdfBtn.addEventListener('click', downloadPDF);
finalizeBtn.addEventListener('click', async () => {
  const filename = await downloadPDF();
  setTimeout(() => openMailToDean(filename), 500);
});
document.addEventListener('keydown', e => { if (e.ctrlKey && e.key === 's') { e.preventDefault(); downloadCSV(); } });

function showToast(msg) {
  const ex = document.querySelector('.toast');
  if (ex) ex.remove();
  const t = document.createElement('div');
  t.className = 'toast';
  t.textContent = msg;
  document.body.appendChild(t);
  setTimeout(() => t.remove(), 2000);
}

// Initial render to ensure student list appears
renderMasterList();
</script>
</body>
</html>
