<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>R.C Technical Institute ‚Äî CO11 Attendance (Multi-Page PDF Fix)</title>

<!-- Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<style>
  :root{
    --bg:#0d1b2a; --card:#10263a; --accent:#00ff99; --text:#e6eef6; --muted:#93a7bf; --border:rgba(0,255,153,0.08);
    font-family:Inter, Arial, sans-serif;
  }
  [data-theme="light"]{
    --bg:#f5f7fb; --card:#ffffff; --text:#111; --muted:#5b6b7a; --border:rgba(10,150,90,0.06);
  }
  html,body{height:100%;margin:0;background:var(--bg);color:var(--text);-webkit-font-smoothing:antialiased}
  .page{max-width:1200px;margin:20px auto;padding:16px}
  header{display:flex;gap:12px;align-items:center;border-bottom:1px solid var(--border);padding-bottom:12px;margin-bottom:14px}
  .logo{width:56px;height:56px;border-radius:10px;background:linear-gradient(135deg,#00cc88,#0066ff);display:flex;align-items:center;justify-content:center;font-weight:800;color:#022}
  h1{margin:0;font-size:20px;color:var(--accent)}
  .muted{color:var(--muted);font-size:13px}
  .auth{display:flex;gap:8px;align-items:center;margin-left:auto}
  .input{padding:8px;border-radius:8px;border:1px solid var(--border);background:transparent;color:var(--text);outline:none}
  button{padding:8px 10px;border-radius:8px;border:1px solid var(--border);background:transparent;color:var(--text);cursor:pointer;font-weight:700; transition: transform 0.15s ease-out;}
  button:hover{transform: scale(1.05);}
  .btn-primary{background:linear-gradient(135deg,#00ff99,#3a86ff);border:none;color:#042}
  .btn-ghost{border-style:dashed}
  .layout{display:grid;grid-template-columns:1fr 420px;gap:16px}
  .card{background:var(--card);padding:12px;border-radius:12px;border:1px solid var(--border)}
  .card-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}
  .title{font-weight:800;color:var(--accent)}
  .master-scroll{max-height:540px;overflow:auto;padding:6px;border-radius:8px;border:1px solid var(--border)}
  .row{display:flex;justify-content:space-between;align-items:center;padding:10px;border-radius:8px; transition: background-color 0.3s;}
  .row:hover{background:rgba(255,255,255,0.02)}
  .row.highlight { animation: highlight-fade 1.5s ease-out; }
  .row.current { background-color: rgba(0, 255, 153, 0.1); }
  @keyframes highlight-fade { 0% { background-color: rgba(0, 255, 153, 0.3); } 100% { background-color: transparent; } }
  .avatar{width:44px;height:44px;border-radius:8px;background:linear-gradient(135deg,#00cc88,#0066ff);display:flex;align-items:center;justify-content:center;font-weight:800;color:#022;flex-shrink:0}
  .badge{padding:6px 10px;border-radius:999px;font-weight:800;font-size:13px}
  .present{background:rgba(6,214,160,0.12);color:#06d6a0}
  .absent{background:rgba(239,71,111,0.12);color:#ef476f}
  .late{background:rgba(255,209,102,0.12);color:#ffd166}
  .found{padding:12px;border-radius:10px;background:rgba(255,255,255,0.02);margin-top:10px}
  .progress{height:8px;background:var(--border);border-radius:10px;overflow:hidden;margin-bottom:10px}
  .progress-fill{height:100%;background:var(--accent);width:0%;transition:width .45s}
  #dashboardCanvas{width:100%;display:block;border-radius:6px;max-height:220px;}
  .toast{position:fixed;right:18px;bottom:18px;background:rgba(12,20,32,0.95);padding:8px 12px;border-radius:10px;color:var(--accent);font-weight:800;z-index:9999}
  .controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  @media (max-width:980px){ .layout{grid-template-columns:1fr} .auth{flex-wrap:wrap} }
  .kbd{background:rgba(255,255,255,0.03);padding:4px 6px;border-radius:6px;font-weight:700}
  footer{margin-top:18px;text-align:center;color:var(--muted);font-size:13px}
  .edit-btn{margin-left:8px;padding:6px 8px;border-radius:8px;background:rgba(255,255,255,0.02);font-weight:700;cursor:pointer}
  .edit-menu{position:relative; display:inline-flex; align-items:center;}
  .menu-popup{position:absolute;right:0;top:28px;background:var(--card);padding:8px;border-radius:8px;border:1px solid var(--border);z-index:9999;min-width:140px}
  .menu-popup button{display:block;width:100%;text-align:left;margin:4px 0}
  .input:focus, button:focus, select:focus { box-shadow:0 0 0 3px rgba(0,255,153,0.06); border-color:var(--accent) }
</style>
</head>
<body>
  <div class="page" role="application" aria-label="Attendance app">
    <header>
      <div class="logo" aria-hidden="true">RC</div>
      <div style="flex:1">
        <h1>R.C Technical Institute ‚Äî CO11 Attendance</h1>
        <div class="muted">Reliable attendance ‚Äî chart, export, lists, theme</div>
      </div>
      <div class="auth">
        <input id="username" class="input" placeholder="username" />
        <input id="password" class="input" placeholder="password" type="password" />
        <button id="authBtn" class="btn-primary">Login / Signup</button>
        <button id="logoutBtn" class="btn-ghost" style="display:none">Logout</button>
        <button id="themeBtn" class="btn-ghost">üåô</button>
      </div>
    </header>

    <div class="layout">
      <div>
        <div class="card">
          <div class="card-header"><div class="title">üìä Live Dashboard</div><div class="muted">Real-time attendance stats</div></div>
          <div id="statsRow" style="display:flex;gap:8px;align-items:center;margin-bottom:8px; flex-wrap:wrap;"></div>
          <canvas id="dashboardCanvas"></canvas>
        </div>

        <div style="height:12px"></div>

        <div class="card">
            <div class="card-header"><div class="title">üìà Attendance Trend</div><div class="muted">Full history</div></div>
            <canvas id="trendCanvas" style="max-height:150px;"></canvas>
        </div>

        <div style="height:12px"></div>

        <div class="card">
          <div class="card-header"><div class="title">üîé Mark Attendance</div><div class="muted">Click student or search</div></div>
          <div class="progress"><div id="progressFill" class="progress-fill"></div></div>

          <div style="display:flex;gap:8px;align-items:center;margin-bottom:10px" class="controls">
            <input id="dateInput" type="date" class="input" style="width:140px" />
            <select id="subjectInput" class="input" style="width:170px"></select>
            <input id="searchInput" class="input" placeholder="enroll or name... (/)" style="flex:1" />
            <button id="searchBtn" class="btn-primary">Search</button>
          </div>

          <div id="foundArea" class="found muted">Select a student to begin marking. Use <span class="kbd">P</span>, <span class="kbd">L</span>, <span class="kbd">A</span>, <span class="kbd">C</span> for quick marking.</div>
        </div>
          
        <div style="height:12px"></div>

        <div class="card">
          <div class="card-header"><div class="title">üì§ Export & Actions</div></div>
            
          <div class="controls">
            <input id="deanEmail" class="input" placeholder="Dean email" style="flex:1" />
            <button id="emailBtn" class="btn-primary">Email Dean</button>
          </div>
          
          <div style="margin-top: 12px; border-top: 1px solid var(--border); padding-top: 12px;">
            <div class="muted" style="margin-bottom: 8px;">Export Range (for selected subject):</div>
            <div class="controls">
                <input id="fromDateInput" type="date" class="input" />
                <span class="muted">to</span>
                <input id="toDateInput" type="date" class="input" />
            </div>
            <div class="controls" style="margin-top: 8px;">
                <button id="pdfBtn" class="btn-ghost">‚¨áÔ∏è PDF</button>
                <button id="csvBtn" class="btn-ghost">CSV</button>
                <button id="xlsxBtn" class="btn-ghost">Excel</button>
                <input type="file" id="importCsv" accept=".csv" style="display:none" />
                <label for="importCsv" class="btn-ghost" style="cursor:pointer">üì• Import</label>
            </div>
          </div>
        </div>
      </div>

      <div>
        <div class="card">
          <div class="card-header"><div class="title">üìã Students</div><div class="muted">Click to mark ‚Ä¢ Dbl-click for details</div></div>
          <div class="master-scroll" id="studentList"></div>
        </div>

        <div style="height:12px"></div>

        <div class="card">
          <div class="card-header"><div class="title">üìâ Low Attendance (&lt;70%)</div><div class="muted" id="lowAttStatus">Auto-refreshes</div></div>
          <div id="lowList" style="max-height:300px;overflow:auto" class="muted">No students below 70%</div>
        </div>
        
        <div style="height:12px"></div>

        <div class="card">
          <div class="card-header"><div class="title">üïí Recent Marks</div><div class="muted">Latest 50 actions</div></div>
          <div id="recentList" style="max-height:260px;overflow:auto" class="muted">No recent marks</div>
        </div>
      </div>
    </div>

    <footer>Built for R.C Technical Institute ‚Ä¢ Full edit & live dashboard</footer>
  </div>

  <div id="printArea" style="position:fixed;left:-9999px;top:-9999px;"></div>
  <div id="toastWrap" aria-live="polite"></div>

<script>
(function(){
  'use strict';

  const SUBJECTS = ['CPF','MATHS','PHYSICS','BE','ENGLISH'];
  const STUDENTS = [
    { enrollmentNumber: "COMP101", name: "AGRAVAT SUNNY HASMUKHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP102", name: "AMIN VIDHI HARSIDDHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP103", name: "ANSARIJULAYA MOHAMMAD TALHA", class: "CO11" },
    { enrollmentNumber: "COMP105", name: "BADI MOHMADSALIK RASUL", class: "CO11" },
    { enrollmentNumber: "COMP106", name: "BARAD PRIYABEN SURESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP108", name: "BAROT SHLOK NAYANKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP109", name: "BASANTANI SUMIT GOPICHAND", class: "CO11" },
    { enrollmentNumber: "COMP110", name: "BHAND YASH SUBHASHCHANDRA", class: "CO11" },
    { enrollmentNumber: "COMP111", name: "BHARVAD HARDIK BHIMABHAI", class: "CO11" },
    { enrollmentNumber: "COMP113", name: "BHATIYA DEEP BHAVESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP114", name: "BHURIYA HETVI YOGESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP115", name: "BRAHMBHATT JIYA BHAVESH", class: "CO11" },
    { enrollmentNumber: "COMP116", name: "BUHA SNEH GIRISHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP117", name: "BUKHARI ALISHAN ALIRAZA", class: "CO11" },
    { enrollmentNumber: "COMP118", name: "BUKHARI TABISH MAHEDI ALIRAZA", class: "CO11" },
    { enrollmentNumber: "COMP120", name: "CHAUHAN ASHISHBHAI KANTIBHAI", class: "CO11" },
    { enrollmentNumber: "COMP122", name: "CHAUHAN JAHNAVI SOHAGKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP123", name: "CHAUHAN KARAN GUNVANTBHAI", class: "CO11" },
    { enrollmentNumber: "COMP124", name: "CHAUHAN RISHI BHUPENDRABHAI", class: "CO11" },
    { enrollmentNumber: "COMP127", name: "CHAUHAN USMITA MAHESHJI", class: "CO11" },
    { enrollmentNumber: "COMP129", name: "CHAVADA PRATIK KISHANSINH", class: "CO11" },
    { enrollmentNumber: "COMP130", name: "CHHODBADIA DEEP MEHULKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP131", name: "DABHI MITRAJSINH SANJAYSINH", class: "CO11" },
    { enrollmentNumber: "COMP132", name: "DANAK VATSAL JANAKKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP134", name: "DARJI ASHVINI SURESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP135", name: "DARJI AYUSH MAHESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP136", name: "DARJI JAL VINODBHAI", class: "CO11" },
    { enrollmentNumber: "COMP137", name: "DARJI JAY MANISHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP139", name: "DARJI SHLOK JITENDRAKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP140", name: "DARJI SIDDHIBEN KANTIBHAI", class: "CO11" },
    { enrollmentNumber: "COMP141", name: "DAVE AAYUSH MEHULBHAI", class: "CO11" },
    { enrollmentNumber: "COMP143", name: "DAVE DHRUV JITENDRAKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP144", name: "DAVE KHWAISH MEHUL", class: "CO11" },
    { enrollmentNumber: "COMP145", name: "DAVE SHIVAM RUPESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP146", name: "DEDAKIYA JAYMIN NAYANBHAI", class: "CO11" },
    { enrollmentNumber: "COMP147", name: "DESAI ANKESHKUMAR MERAJBHAI", class: "CO11" },
    { enrollmentNumber: "COMP148", name: "DESAI ISHAN NARANBHAI", class: "CO11" },
    { enrollmentNumber: "COMP149", name: "DESAI PRAKASHBHAI RANABHAI", class: "CO11" },
    { enrollmentNumber: "COMP150", name: "DHOBI HARSH SACHINKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP151", name: "DHOKIYA SHLOKKUMAR ARAVINDBHAI", class: "CO11" },
    { enrollmentNumber: "COMP152", name: "DHRUVESH PATEL", class: "CO11" },
    { enrollmentNumber: "COMP153", name: "DIVYESH MITESH CHHATBAR", class: "CO11" },
    { enrollmentNumber: "COMP154", name: "DIWAN AKSHAY AMIT", class: "CO11" },
    { enrollmentNumber: "COMP155", name: "DIWAN REHAN AHMED MO. JAVED", class: "CO11" },
    { enrollmentNumber: "COMP156", name: "DOMADIYA MEET SHAILESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP157", name: "DOMADIYA MOHIT RATILAL", class: "CO11" },
    { enrollmentNumber: "COMP158", name: "DONGA YUG VIPULBHAI", class: "CO11" },
    { enrollmentNumber: "COMP160", name: "GADHAVI TWISHA VIJAYDAN", class: "CO11" },
    { enrollmentNumber: "COMP162", name: "GAJJAR RUDRA MAULIK", class: "CO11" },
    { enrollmentNumber: "COMP163", name: "GAUTAM SHUBHAM SATYAPRAKASH", class: "CO11" },
    { enrollmentNumber: "COMP164", name: "GORE SAKSHI VILAS", class: "CO11" },
    { enrollmentNumber: "COMP165", name: "GORECHA SHUBHAM HIRENKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP167", name: "GOTHI KULDEEPKUMAR DHARMENDRA", class: "CO11" },
    { enrollmentNumber: "COMP168", name: "GUPTA VANSHIK PARESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP169", name: "GURJAR PARTHKUMAR DEVRAMBHAI", class: "CO11" },
    { enrollmentNumber: "COMP171", name: "HENIL PARIKH", class: "CO11" },
    { enrollmentNumber: "COMP172", name: "JADAV VAIDIK VIJAYBHAI", class: "CO11" },
    { enrollmentNumber: "COMP173", name: "JAIN DARSHIL JITENDRA", class: "CO11" },
    { enrollmentNumber: "COMP174", name: "JAIN LOVE MANISHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP175", name: "JAISVAR ABHISHEK RAMBALI", class: "CO11" },
    { enrollmentNumber: "COMP176", name: "JANDIYA VAIBHAV ISHWARBHAI", class: "CO11" },
    { enrollmentNumber: "COMP177", name: "JANI YASHVI VIPULBHAI", class: "CO11" },
    { enrollmentNumber: "COMP178", name: "JAWALE DHAKESH YOGESH", class: "CO11" },
    { enrollmentNumber: "COMP179", name: "JAYSWAL DAKSH DIPAKKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP180", name: "BHALIYA BHAIRAVI KIRITBHAI", class: "CO11" },
    { enrollmentNumber: "COMP181", name: "BHAVSAR KARTIK MITESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP182", name: "BHAVYA CHANDRAKANT PRAJAPATI", class: "CO11" },
    { enrollmentNumber: "COMP183", name: "CHAUDHARI BHAVY DINESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP184", name: "CHAUHAN DIXITA DILIPBHAI", class: "CO11" },
    { enrollmentNumber: "COMP185", name: "CHAUHAN VIVEK", class: "CO11" },
    { enrollmentNumber: "COMP186", name: "CHHATBAR HET ALPESH", class: "CO11" },
    { enrollmentNumber: "COMP187", name: "CHITRODA JAY SANJAYBHAI", class: "CO11" },
    { enrollmentNumber: "COMP188", name: "DARJI ARYAN SANJAYBHAI", class: "CO11" },
    { enrollmentNumber: "COMP189", name: "DESAI ARYAN KALPESHBHAI", class: "CO11" },
    { enrollmentNumber: "COMP191", name: "DODIYA ADITI BHUPENDRABHAI", class: "CO11" },
    { enrollmentNumber: "COMP192", name: "GAJJAR BHAVYAKUMAR VIPULKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP193", name: "GANDHARVA KARINA JITESHKUMAR", class: "CO11" },
    { enrollmentNumber: "COMP194", name: "HEMAL NAGAR", class: "CO11" },
    { enrollmentNumber: "COMP195", name: "KANHA SENJALIYA", class: "CO11" }
  ];
  const STORAGE_KEY = 'rc_co11_state_editor_v5';

  const $ = id => document.getElementById(id);
  function mk(tag, props = {}, children = []) {
    const e = document.createElement(tag);
    Object.entries(props).forEach(([key, value]) => {
        if (key === 'class') e.className = value;
        else if (key === 'text') e.textContent = value;
        else if (key === 'html') e.innerHTML = value;
        else e.setAttribute(key, value);
    });
    (Array.isArray(children) ? children : [children]).flat().forEach(c => {
        if (typeof c === 'string') e.appendChild(document.createTextNode(c));
        else if (c instanceof Node) e.appendChild(c);
    });
    return e;
  }
  const escape = s => String(s == null ? '' : s);
  const today = () => new Date().toISOString().slice(0, 10);
  function showToast(msg, ms = 2000) {
    const w = $('toastWrap'); w.innerHTML = '';
    const t = mk('div', { class: 'toast', text: msg });
    w.appendChild(t);
    setTimeout(() => t.remove(), ms);
  }

  let state = { users: {}, currentUser: null, attendance: {}, lectureDates: {}, recent: {}, settings: { theme: null } };
  let currentStudentEnrollment = null;

  function safeLoad() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) Object.assign(state, JSON.parse(raw));
    } catch (e) { console.warn('State load failed:', e); }
    SUBJECTS.forEach(s => { state.lectureDates[s] = state.lectureDates[s] || []; state.recent[s] = state.recent[s] || []; });
    STUDENTS.forEach(st => { state.attendance[st.enrollmentNumber] = state.attendance[st.enrollmentNumber] || { dates: {} }; });
  }
  const safeSave = () => { try { localStorage.setItem(STORAGE_KEY, JSON.stringify(state)); } catch (e) { console.warn('State save failed:', e); } };

  const nodes = {
    dateInput: $('dateInput'), subjectInput: $('subjectInput'), searchInput: $('searchInput'), searchBtn: $('searchBtn'),
    foundArea: $('foundArea'), studentList: $('studentList'), recentList: $('recentList'), lowList: $('lowList'),
    statsRow: $('statsRow'), dashboardCanvas: $('dashboardCanvas'), trendCanvas: $('trendCanvas'), progressFill: $('progressFill'),
    pdfBtn: $('pdfBtn'), csvBtn: $('csvBtn'), xlsxBtn: $('xlsxBtn'), importCsv: $('importCsv'),
    lowAttStatus: $('lowAttStatus'), themeBtn: $('themeBtn'), authBtn: $('authBtn'), logoutBtn: $('logoutBtn'),
    username: $('username'), password: $('password'), fromDateInput: $('fromDateInput'), toDateInput: $('toDateInput'),
    deanEmail: $('deanEmail'), emailBtn: $('emailBtn')
  };

  let dashboardChart = null;
  let trendChart = null;

  function updateDashboardChart() {
    const subject = nodes.subjectInput.value;
    const date = nodes.dateInput.value;
    let present = 0, absent = 0, late = 0;
    STUDENTS.forEach(s => {
      const status = state.attendance[s.enrollmentNumber]?.dates?.[date]?.[subject]?.status;
      if (status === 'present') present++;
      else if (status === 'absent') absent++;
      else if (status === 'late') late++;
    });
    const unmarked = STUDENTS.length - (present + absent + late);
    nodes.statsRow.innerHTML = '';
    ['Present', 'Absent', 'Late', 'Unmarked'].forEach(s => {
      const count = { Present: present, Absent: absent, Late: late, Unmarked: unmarked }[s];
      const badgeClass = s === 'Unmarked' ? 'badge' : `badge ${s.toLowerCase()}`;
      nodes.statsRow.appendChild(mk('div', { class: badgeClass, html: `${s}: <b>${count}</b>` }));
    });
    nodes.progressFill.style.width = `${STUDENTS.length ? Math.round((present + absent + late) / STUDENTS.length * 100) : 0}%`;

    const data = [present, absent, late, unmarked];
    const textColor = getComputedStyle(document.body).getPropertyValue('--text');
    if (dashboardChart) {
      dashboardChart.data.datasets[0].data = data;
      dashboardChart.options.plugins.title.text = `${subject} ‚Äî ${date}`;
      dashboardChart.options.plugins.legend.labels.color = textColor;
      dashboardChart.options.plugins.title.color = textColor;
      dashboardChart.update();
    } else {
      dashboardChart = new Chart(nodes.dashboardCanvas.getContext('2d'), {
        type: 'pie',
        data: { labels: ['Present', 'Absent', 'Late', 'Unmarked'], datasets: [{ data, backgroundColor: ['#06d6a0', '#ef476f', '#ffd166', '#778da9'] }] },
        options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { color: textColor } }, title: { display: true, text: `${subject} ‚Äî ${date}`, color: textColor } } }
      });
    }
  }
    
  function renderTrendChart() {
      const subject = nodes.subjectInput.value;
      const lectureDates = (state.lectureDates[subject] || []).sort();
      
      const dataPoints = lectureDates.map(date => {
          let present = 0, absent = 0, late = 0;
          STUDENTS.forEach(s => {
              const status = state.attendance[s.enrollmentNumber]?.dates?.[date]?.[subject]?.status;
              if (status === 'present') present++;
              else if (status === 'absent') absent++;
              else if (status === 'late') late++;
          });
          const totalMarked = present + absent + late;
          return totalMarked > 0 ? (present / totalMarked) * 100 : 0;
      });

      const textColor = getComputedStyle(document.body).getPropertyValue('--text');
      const borderColor = getComputedStyle(document.body).getPropertyValue('--border');

      if (trendChart) {
          trendChart.data.labels = lectureDates;
          trendChart.data.datasets[0].data = dataPoints;
          trendChart.options.scales.y.ticks.color = textColor;
          trendChart.options.scales.x.ticks.color = textColor;
          trendChart.options.scales.y.grid.color = borderColor;
          trendChart.options.scales.x.grid.color = borderColor;
          trendChart.update();
      } else {
          trendChart = new Chart(nodes.trendCanvas.getContext('2d'), {
              type: 'line',
              data: { labels: lectureDates, datasets: [{ label: 'Turnout %', data: dataPoints, fill: true, borderColor: 'var(--accent)', tension: 0.1, backgroundColor: 'rgba(0, 255, 153, 0.1)' }] },
              options: {
                  responsive: true, maintainAspectRatio: false,
                  plugins: { legend: { display: false } },
                  scales: { 
                      y: { beginAtZero: true, max: 100, ticks: { color: textColor, callback: (value) => value.toFixed(0) + '%' }, grid: { color: borderColor } }, 
                      x: { ticks: { color: textColor, autoSkip: true, maxTicksLimit: 15 }, grid: { color: borderColor } } 
                  }
              }
          });
      }
  }

  function renderStudents() {
    const date = nodes.dateInput.value;
    const subject = nodes.subjectInput.value;
    const container = nodes.studentList;
    container.innerHTML = '';
    STUDENTS.forEach(st => {
      const status = state.attendance[st.enrollmentNumber]?.dates?.[date]?.[subject]?.status || '‚Äî';
      const statusClass = { present: 'present', absent: 'absent', late: 'late' }[status] || '';
      
      const editBtn = mk('button', { class: 'edit-btn', text: 'Edit' });
      editBtn.addEventListener('click', ev => {
        ev.stopPropagation();
        document.querySelectorAll('.menu-popup').forEach(n => n.remove());
        const popup = mk('div', { class: 'menu-popup' });
        ['present', 'late', 'absent', 'undo'].forEach(opt => {
          const b = mk('button', { text: opt === 'undo' ? 'Clear Mark' : opt.charAt(0).toUpperCase() + opt.slice(1) });
          b.addEventListener('click', e => { e.stopPropagation(); popup.remove(); opt === 'undo' ? clearMark(st.enrollmentNumber, subject, date) : mark(st.enrollmentNumber, subject, date, opt); });
          popup.appendChild(b);
        });
        editBtn.parentElement.appendChild(popup);
        const closeHandler = e => { if (!popup.contains(e.target)) { popup.remove(); document.removeEventListener('click', closeHandler); } };
        setTimeout(() => document.addEventListener('click', closeHandler), 10);
      });
        
      const rowClasses = ['row'];
      if(st.enrollmentNumber === currentStudentEnrollment) rowClasses.push('current');

      const row = mk('div', { class: rowClasses.join(' '), 'data-enroll': st.enrollmentNumber }, [
        mk('div', { style: 'display:flex;align-items:center;gap:12px;' }, [
          mk('div', { class: 'avatar', text: st.name.split(' ').slice(0, 2).map(n => n[0] || '').join('') }),
          mk('div', {}, [ mk('div', { style: 'font-weight:800', text: st.name }), mk('div', { class: 'muted', text: st.enrollmentNumber }) ])
        ]),
        mk('div', {}, [ mk('div', { class: `badge ${statusClass}`, text: status.charAt(0).toUpperCase() + status.slice(1) }), mk('div', { class: 'edit-menu' }, [editBtn]) ])
      ]);
      row.addEventListener('click', () => showFound(st));
      row.addEventListener('dblclick', () => showStudentDetails(st));
      container.appendChild(row);
    });
  }
    
  function renderRecent() {
    const subject = nodes.subjectInput.value;
    nodes.recentList.innerHTML = '';
    const list = (state.recent[subject] || []).slice().reverse().slice(0, 50);
    if (!list.length) { nodes.recentList.classList.add('muted'); nodes.recentList.textContent = 'No recent marks'; return; }
    nodes.recentList.classList.remove('muted');
    list.forEach(item => {
      const left = mk('div', { style: 'display:flex; align-items:center; gap:12px;' }, [
        mk('div', { class: 'avatar', text: (item.student || item.enrollment).split(' ').slice(0, 2).map(n => n[0] || '').join('') }),
        mk('div', {}, [ mk('div', { style: 'font-weight:800', text: item.student }), mk('div', { class: 'muted', text: `${item.enrollment} ‚Ä¢ ${item.date} ‚Ä¢ ${item.timestamp}` }) ])
      ]);
      const status = item.status || 'unmarked';
      const badge = mk('div', { class: `badge ${status}`, text: status.charAt(0).toUpperCase() + status.slice(1) });
      nodes.recentList.appendChild(mk('div', { class: 'row' }, [left, badge]));
    });
  }

  function renderLow() {
    nodes.lowList.innerHTML = '';
    const allDatesBySubject = SUBJECTS.reduce((acc, sub) => { acc[sub] = (state.lectureDates[sub] || []); return acc; }, {});
    const totalLectures = Object.values(allDatesBySubject).flat().length;
    
    if (totalLectures === 0) {
        nodes.lowList.classList.add('muted');
        nodes.lowList.textContent = 'No lecture data to calculate.';
        return;
    }

    const rows = STUDENTS.map(st => {
      let presentCount = 0;
      Object.entries(state.attendance[st.enrollmentNumber].dates).forEach(([date, subjects]) => {
          Object.entries(subjects).forEach(([subject, data]) => {
              if (data.status === 'present' && allDatesBySubject[subject]?.includes(date)) {
                  presentCount++;
              }
          });
      });
      const perc = Math.round((presentCount / totalLectures) * 100);
      return { st, present: presentCount, totalLect: totalLectures, perc };
    }).filter(r => r.perc < 70).sort((a, b) => a.perc - b.perc);

    if (!rows.length) { nodes.lowList.classList.add('muted'); nodes.lowList.textContent = 'No students below 70%'; return; }
    
    nodes.lowList.classList.remove('muted');
    rows.forEach(r => {
      const left = mk('div', { style: 'display:flex; gap:12px; align-items:center;' }, [
        mk('div', { class: 'avatar', text: r.st.name.split(' ').slice(0, 2).map(n => n[0] || '').join('') }),
        mk('div', {}, [mk('div', { style: 'font-weight:800', text: r.st.name }), mk('div', { class: 'muted', text: `${r.st.enrollmentNumber} ‚Ä¢ ${r.present}/${r.totalLect}` })])
      ]);
      const badge = mk('div', { class: 'badge absent', text: `${r.perc}%` });
      nodes.lowList.appendChild(mk('div', { class: 'row', }, [left, badge]));
    });
  }

  function renderAll() { renderStudents(); updateDashboardChart(); renderTrendChart(); renderLow(); renderRecent(); }

  function mark(enrollment, subject, date, status, opts = {}) { 
    if (!state.currentUser) return showToast('Please sign in to mark attendance.'); 
    const rec = state.attendance[enrollment]; 
    rec.dates[date] = rec.dates[date] || {}; 
    rec.dates[date][subject] = { status, timestamp: new Date().toLocaleTimeString() }; 
    if (!state.lectureDates[subject].includes(date)) { state.lectureDates[subject].push(date); state.lectureDates[subject].sort(); } 
    state.recent[subject] = (state.recent[subject] || []).filter(r => !(r.enrollment === enrollment && r.date === date)); 
    state.recent[subject].push({ enrollment, student: STUDENTS.find(s => s.enrollmentNumber === enrollment)?.name || enrollment, status, subject, date, timestamp: rec.dates[date][subject].timestamp }); 
    safeSave(); 
    renderAll(); 
    if (!opts.silent) showToast(`Marked ${status} for ${enrollment}`); 
  };
  function clearMark(enrollment, subject, date) { 
    const rec = state.attendance[enrollment]; 
    if (!rec?.dates?.[date]?.[subject]) return showToast('No mark to clear'); 
    delete rec.dates[date][subject]; 
    if (!STUDENTS.some(s => state.attendance[s.enrollmentNumber].dates[date]?.[subject])) state.lectureDates[subject] = state.lectureDates[subject].filter(d => d !== date); 
    state.recent[subject] = state.recent[subject].filter(r => !(r.enrollment === enrollment && r.date === date)); 
    safeSave(); 
    renderAll(); 
    showToast('Cleared mark'); 
  };

  function showFound(student) {
    currentStudentEnrollment = student.enrollmentNumber;
    renderStudents(); // Re-render to apply the highlight
    nodes.foundArea.innerHTML = '';
    const date = nodes.dateInput.value;
    const subject = nodes.subjectInput.value;
    const rec = state.attendance[student.enrollmentNumber]?.dates?.[date]?.[subject];
    const header = mk('div', { style: 'display:flex; justify-content:space-between; align-items:center;' }, [ mk('div', {}, [ mk('div', { style: 'font-weight:800', text: student.name }), mk('div', { class: 'muted', style: 'margin-top:6px', text: student.enrollmentNumber }) ]), mk('div', { style: 'text-align:right;' }, [ mk('div', { class: 'muted', text: `${subject} ‚Ä¢ ${date}` }), mk('div', { style: 'font-weight:900', text: rec ? rec.status.charAt(0).toUpperCase() + rec.status.slice(1) : '‚Äî' }) ]) ]);
    const actions = mk('div', { style: 'margin-top:10px; display:flex; gap:8px;' });
    const actionHandler = (action) => {
      const status = action.toLowerCase();
      status === 'clear' ? clearMark(student.enrollmentNumber, subject, date) : mark(student.enrollmentNumber, subject, date, status);
      const currentIndex = STUDENTS.findIndex(s => s.enrollmentNumber === student.enrollmentNumber);
      if (currentIndex > -1 && currentIndex < STUDENTS.length - 1) {
        showFound(STUDENTS[currentIndex + 1]);
      } else {
        nodes.foundArea.innerHTML = mk('div', { class: 'muted', text: 'Reached the end of the student list.' }).outerHTML;
        currentStudentEnrollment = null;
        renderStudents();
        showToast('All students processed!');
      }
    };
    ['Present', 'Late', 'Absent', 'Clear'].forEach(action => { const btn = mk('button', { class: action === 'Present' ? 'btn-primary' : 'btn-ghost', text: action }); btn.addEventListener('click', () => actionHandler(action)); actions.appendChild(btn); });
    nodes.foundArea.appendChild(header);
    nodes.foundArea.appendChild(actions);
  }
    
  function showStudentDetails(student) {
    const overlay = mk('div', { style: 'position:fixed;inset:0;background:rgba(0,0,0,0.6);display:flex;align-items:center;justify-content:center;padding:20px;z-index:9999' });
    const card = mk('div', { class: 'card', style: 'width:100%;max-width:760px;max-height:90%;overflow:auto' });
    const close = mk('button', { class: 'btn-ghost', text: 'Close' });
    close.addEventListener('click', () => overlay.remove());

    const header = mk('div', { style: 'display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;' }, [ mk('div', { style: 'font-weight:900', text: student.name }), close ]);
    card.appendChild(header);

    const chartsGrid = mk('div', { style: 'display:grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-top: 12px;' });

    SUBJECTS.forEach(sub => {
        const chartWrapper = mk('div', { style: 'text-align: center;' });
        const canvasId = `student-${student.enrollmentNumber}-${sub}-chart`;
        chartWrapper.appendChild(mk('div', { class: 'title', style: 'font-size: 14px; margin-bottom: 8px;', text: sub }));
        chartWrapper.appendChild(mk('canvas', { id: canvasId, style: 'max-height: 120px;' }));
        chartsGrid.appendChild(chartWrapper);

        setTimeout(() => {
            const lectureDates = state.lectureDates[sub] || [];
            let present = 0, late = 0, absent = 0;
            lectureDates.forEach(date => {
                const status = state.attendance[student.enrollmentNumber]?.dates?.[date]?.[sub]?.status;
                if(status === 'present') present++;
                else if(status === 'late') late++;
                else if(status === 'absent') absent++;
            });
            const unmarked = lectureDates.length - (present + late + absent);
            
            new Chart(document.getElementById(canvasId).getContext('2d'), {
                type: 'pie',
                data: { labels: ['Present', 'Late', 'Absent', 'Unmarked'], datasets: [{ data: [present, late, absent, unmarked], backgroundColor: ['#06d6a0', '#ffd166', '#ef476f', '#778da9'] }] },
                options: { responsive: true, maintainAspectRatio: true, plugins: { legend: { display: false } } }
            });
        }, 50);
    });
    
    card.appendChild(chartsGrid);
    overlay.appendChild(card);
    document.body.appendChild(overlay);
    overlay.addEventListener('click', e => { if (e.target === overlay) overlay.remove(); });
  }

  // --- EXPORT AND ACTION LOGIC ---
  function getMultiDaySnapshot(fromDate, toDate, subject) {
    if (!fromDate || !toDate || toDate < fromDate) {
      showToast('Invalid date range selected.');
      return null;
    }
    const relevantDates = (state.lectureDates[subject] || []).filter(d => d >= fromDate && d <= toDate).sort();
    if (relevantDates.length === 0) {
      showToast('No lecture data found in the selected range for this subject.');
      return null;
    }
    const data = STUDENTS.map(student => {
      const row = { Enrollment: student.enrollmentNumber, Name: student.name };
      relevantDates.forEach(date => {
        row[date] = state.attendance[student.enrollmentNumber]?.dates?.[date]?.[subject]?.status || '‚Äî';
      });
      return row;
    });
    return { data, dates: relevantDates };
  }
    
  nodes.csvBtn.addEventListener('click', () => {
    const { fromDateInput, toDateInput, subjectInput } = nodes;
    const snapshot = getMultiDaySnapshot(fromDateInput.value, toDateInput.value, subjectInput.value);
    if (!snapshot) return;
    const { data } = snapshot;
    const ws = XLSX.utils.json_to_sheet(data);
    const csv = XLSX.utils.sheet_to_csv(ws);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8,' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `Attendance_${subjectInput.value}_${fromDateInput.value}_to_${toDateInput.value}.csv`;
    link.click();
    showToast('CSV downloaded');
  });

  nodes.xlsxBtn.addEventListener('click', () => {
    const { fromDateInput, toDateInput, subjectInput } = nodes;
    const snapshot = getMultiDaySnapshot(fromDateInput.value, toDateInput.value, subjectInput.value);
    if (!snapshot) return;
    const { data } = snapshot;
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Attendance');
    XLSX.writeFile(wb, `Attendance_${subjectInput.value}_${fromDateInput.value}_to_${toDateInput.value}.xlsx`);
    showToast('Excel downloaded');
  });
    
  nodes.pdfBtn.addEventListener('click', async () => {
    const { fromDateInput, toDateInput, subjectInput } = nodes;
    const snapshot = getMultiDaySnapshot(fromDateInput.value, toDateInput.value, subjectInput.value);
    if (!snapshot) return;
    const { data, dates } = snapshot;
    
    showToast('Generating PDF...');
    const header = ['Enrollment', 'Name', ...dates].map(h => `<th style="padding:4px 6px; border:1px solid #ddd; background:#eee; color:#000;">${escape(h)}</th>`).join('');
    const body = data.map(row => `<tr>${Object.values(row).map(v => `<td style="padding:4px 6px; border:1px solid #ddd; color:#000;">${escape(v)}</td>`).join('')}</tr>`).join('');
    const printableHTML = `<div style="font-family:Arial; padding:20px; background:white; color:black;">
        <h3 style="color:#000;">Attendance for ${subjectInput.value}</h3>
        <p style="color:#333; font-size: 12px;">From: ${fromDateInput.value} To: ${toDateInput.value}</p>
        <table style="border-collapse:collapse; width:100%; font-size:10px;"><thead><tr>${header}</tr></thead><tbody>${body}</tbody></table>
    </div>`;

    const pa = $('printArea');
    pa.innerHTML = printableHTML;
    
    try {
        const { jsPDF } = window.jspdf;
        const canvas = await html2canvas(pa.firstElementChild, { scale: 2 });
        const pdf = new jsPDF('l', 'pt', 'a4'); // 'l' for landscape
        
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const ratio = canvas.width / pdfWidth;
        const pageCanvasHeight = pdfHeight * ratio;
        
        let renderedHeight = 0;
        while (renderedHeight < canvas.height) {
            if (renderedHeight > 0) pdf.addPage();
            
            const sliceHeight = Math.min(pageCanvasHeight, canvas.height - renderedHeight);
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = canvas.width;
            tempCanvas.height = sliceHeight;
            const tempCtx = tempCanvas.getContext('2d');
            tempCtx.drawImage(canvas, 0, renderedHeight, canvas.width, sliceHeight, 0, 0, canvas.width, sliceHeight);
            
            const imgData = tempCanvas.toDataURL('image/png');
            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, sliceHeight / ratio);
            renderedHeight += sliceHeight;
        }

        pdf.save(`Attendance_${subjectInput.value}_${fromDateInput.value}_to_${toDateInput.value}.pdf`);
        showToast('PDF downloaded');
    } catch(e) {
        console.error("PDF generation failed:", e);
        showToast("PDF generation failed.");
    } finally {
        pa.innerHTML = '';
    }
  });
    
  nodes.emailBtn.addEventListener('click', () => {
    const email = nodes.deanEmail.value.trim();
    if (!email) return showToast("Please enter the Dean's email address.");
    const subject = `Attendance Report for ${nodes.subjectInput.value}`;
    const body = "Dear Dean,\n\nPlease find the attached attendance report.\n\nBest regards.";
    window.location.href = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  });
  
  nodes.searchBtn.addEventListener('click', () => { const q = nodes.searchInput.value.trim().toLowerCase(); if (!q) return showToast('Enter enrollment or name'); const found = STUDENTS.find(s => s.enrollmentNumber.toLowerCase() === q || s.name.toLowerCase().includes(q)); if (!found) return showToast('Student not found'); showFound(found); const node = document.querySelector(`[data-enroll="${found.enrollmentNumber}"]`); if (node) { node.scrollIntoView({ behavior: 'smooth', block: 'center' }); node.classList.add('highlight'); setTimeout(() => node.classList.remove('highlight'), 1500); } });
  document.addEventListener('keydown', e => { if (['INPUT', 'SELECT', 'TEXTAREA'].includes(document.activeElement.tagName)) return; if (e.key === '/') { e.preventDefault(); nodes.searchInput.focus(); return; } if (nodes.foundArea.querySelector('button')) { const keyMap = { 'p': 'Present', 'l': 'Late', 'a': 'Absent', 'c': 'Clear', 'u': 'Clear' }; const action = keyMap[e.key.toLowerCase()]; if (action) { e.preventDefault(); const button = Array.from(nodes.foundArea.querySelectorAll('button')).find(b => b.textContent === action); if (button) button.click(); } } });
  function applyTheme(t) { const theme = t === 'light' ? 'light' : 'dark'; document.documentElement.dataset.theme = theme; state.settings.theme = theme; nodes.themeBtn.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è'; if (dashboardChart) { dashboardChart.destroy(); trendChart.destroy(); dashboardChart = null; trendChart = null; renderAll(); } }
  nodes.themeBtn.addEventListener('click', () => applyTheme(state.settings.theme === 'dark' ? 'light' : 'dark'));
  function hash(s){ let h=0; for(let i=0;i<s.length;i++) h=(Math.imul(31,h)+s.charCodeAt(i))|0; return String(h); }
  nodes.authBtn.addEventListener('click', ()=>{ const u = nodes.username.value.trim(), p = nodes.password.value.trim(); if(!u || !p){ showToast('Enter username & password'); return; } const key = u.toLowerCase(); if(state.users[key]){ if(state.users[key].pwd !== hash(p)) { showToast('Invalid password'); return; } state.currentUser = key; safeSave(); showToast('Logged in successfully!'); updateAuthUI(); } else { state.users[key] = { pwd: hash(p) }; state.currentUser = key; safeSave(); showToast('Account created & logged in'); updateAuthUI(); } });
  nodes.logoutBtn.addEventListener('click', ()=> { state.currentUser = null; safeSave(); updateAuthUI(); showToast('Logged out.'); });
  function updateAuthUI(){ const loggedIn = !!state.currentUser; nodes.logoutBtn.style.display = loggedIn ? 'inline-block' : 'none'; nodes.authBtn.style.display = loggedIn ? 'none' : 'inline-block'; nodes.username.style.display = loggedIn ? 'none' : 'inline-block'; nodes.password.style.display = loggedIn ? 'none' : 'inline-block'; }
  function init() { nodes.subjectInput.innerHTML = ''; SUBJECTS.forEach(s => nodes.subjectInput.appendChild(mk('option', { value: s, text: s }))); nodes.dateInput.value = today(); nodes.fromDateInput.value = today(); nodes.toDateInput.value = today(); safeLoad(); applyTheme(state.settings.theme || 'dark'); updateAuthUI(); renderAll(); nodes.subjectInput.addEventListener('change', renderAll); nodes.dateInput.addEventListener('change', renderAll); console.log('Enhanced Attendance app ready.'); }
  
  init();

})();
</script>
</body>
</html>
